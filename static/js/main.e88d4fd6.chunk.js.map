{"version":3,"sources":["Components/Card.js","Components/CardArray.js","Components/Searchbox.js","Components/Scroll.js","Containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","username","id","className","alt","src","CardArray","robots","map","users","i","key","Searchbox","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","height","children","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","filteredRobots","this","filter","robot","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2OAeeA,EAbF,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,SAAUC,EAAQ,EAARA,GAClC,OACI,yBAAKC,UAAY,uDACb,yBAAKC,IAAM,cAAcC,IAAG,+BAA2BH,EAA3B,cAC5B,6BACG,4BAAKH,GACL,2BAAIE,GACJ,2BAAID,MCUJM,EAhBG,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACjB,OACI,6BAEQA,EAAOC,KAAI,SAACC,EAAOC,GACf,OAAO,kBAAC,EAAD,CAAMC,IAAOD,EACpBR,GAAKK,EAAOG,GAAGR,GACfH,KAAQQ,EAAOG,GAAGX,KAClBC,MAAQO,EAAOG,GAAGV,MAClBC,SAAYM,EAAOG,GAAGT,gBCG3BW,EAbG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,yBAAKV,UAAU,OACX,2BAAOA,UAAU,mCAChBW,KAAM,SACLC,YAAY,mBACZC,SAAUH,MCGTI,G,MATA,SAACC,GACZ,OACI,yBAAKC,MAAQ,CAACC,SAAU,SAAWC,OAAQ,UACtCH,EAAMI,YCmCJC,E,YAjCX,aAAe,IAAD,8BACV,+CAYJC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAAEd,UAAWa,EAAME,OAAOC,SAZxC,EAAKC,MAAQ,CACTtB,OAAQ,GACRK,UAAW,IAJL,E,iFAOO,IAAD,OAChBkB,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAtB,GAAK,OAAI,EAAKiB,SAAS,CAACnB,OAAQE,S,+BAMjC,IAAD,OACEyB,EAAiBC,KAAKN,MAAMtB,OAAO6B,QAAO,SAAAC,GAC5C,OAAOA,EAAMtC,KAAKuC,cAAcC,SAAS,EAAKV,MAAMjB,UAAU0B,kBAElE,OACI,yBAAKnC,UAAY,MACb,2CACA,kBAAC,EAAD,CAAWU,aAAesB,KAAKX,iBAC/B,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAWjB,OAAW2B,U,GA1BpBM,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAE,EAAF,MAAUC,SAASC,eAAe,SD4H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,iB","file":"static/js/main.e88d4fd6.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({name, email, username, id}) => {\n    return (\n        <div className = ' tc bg-light-blue dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img alt = 'profile pic' src ={`https://robohash.org/${id}?200x200`} />\n            <div>\n               <h2>{name}</h2>\n               <p>{username}</p> \n               <p>{email}</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardArray = ({ robots }) => {\n    return(\n        <div>\n            {\n                robots.map((users, i) => {\n                    return(<Card key = {i} \n                    id ={robots[i].id}\n                    name = {robots[i].name}\n                    email ={robots[i].email} \n                    username = {robots[i].username} \n                    />)\n                })\n            }\n        </div>\n)\n}\nexport default CardArray\n","import React from 'react'\n\nconst Searchbox = ({searchChange}) => {\n    return(\n        <div className='pa2'>\n            <input className='pa3 ba b--green bg-lightest-blue'\n             type ='search'\n              placeholder='Find RoboFriend!'\n              onChange={searchChange}\n             />\n        </div>\n    )\n\n}\n\nexport default Searchbox;","import React from 'react'\n\nconst Scroll = (props) => {\n    return(\n        <div style ={{overflow: 'scroll',  height: '800px'}}>\n            {props.children}\n        </div>\n    )\n\n}\n\nexport default Scroll","import React, { Component } from 'react'\nimport CardArray from '../Components/CardArray'\nimport Searchbox from '../Components/Searchbox'\nimport \"./App.css\";\nimport Scroll from '../Components/Scroll'\n\nclass App extends Component {\n    constructor() {\n        super()\n        this.state = {\n            robots: [], \n            Searchbox: ''\n        }\n    }\n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(users => this.setState({robots: users}))\n    }\n\n    onSearchChange = (event) => {\n        this.setState({ Searchbox: event.target.value })\n    }\n    render(){\n        const filteredRobots = this.state.robots.filter(robot => {\n            return robot.name.toLowerCase().includes(this.state.Searchbox.toLowerCase())\n        })\n        return (\n            <div className = 'tc'>\n                <h1>RoboFriends</h1>\n                <Searchbox searchChange ={this.onSearchChange}/>\n                <Scroll>\n                <CardArray robots = { filteredRobots } />\n                </Scroll>\n            </div>\n        )\n    }\n    \n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css' \nimport App from './Containers/App'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(< App /> ,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}